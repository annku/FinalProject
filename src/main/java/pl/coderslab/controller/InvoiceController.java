package pl.coderslab.controller;


import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import pl.coderslab.entity.Absence;
import pl.coderslab.entity.Activity;
import pl.coderslab.entity.Child;
import pl.coderslab.entity.ChildActivity;
import pl.coderslab.entity.Invoice;
import pl.coderslab.entity.Parent;
import pl.coderslab.invoicemethods.WorkingDays;
import pl.coderslab.repository.AbsenceRepository;
import pl.coderslab.repository.ActivityRepository;
import pl.coderslab.repository.ChildActivityRepository;
import pl.coderslab.repository.ChildRepository;
import pl.coderslab.repository.InvoiceRepository;
import pl.coderslab.repository.ParentRepository;

@Controller
public class InvoiceController {

	@Autowired
	AbsenceRepository repoAbsence;
	@Autowired
	ActivityRepository repoActivity;
	@Autowired
	ChildRepository repoChild;
	@Autowired
	ParentRepository repoParent;
	@Autowired
	InvoiceRepository repoInvoice;
	@Autowired
	ChildActivityRepository repoChildActivity;

	/*
	 * action returns list of parents
	 */
	@GetMapping("/parentList")
	public String allParents(Model model) {
		Invoice invoice = new Invoice();
		model.addAttribute(invoice);
		return "parentList";
	}

	@ModelAttribute("parents")
	public List<Parent> getParents() {
		List<Parent> parents = this.repoParent.findAll();
		return parents;
	}

	/*
	 * action returns invoice generated by teacher
	 */
	@PostMapping("/invoice")
	public String register(@ModelAttribute Invoice invoice, @RequestParam Long id) {
		Parent parent = repoParent.getOne(id);
		List<Child> children = repoChild.findByParentId(id);
		Date startDate = invoice.getStartDate();
		Date endDate = invoice.getEndDate();

		int daysChild = WorkingDays.getWorkingDaysBetweenTwoDates(startDate, endDate) * children.size();
		int activityCost = 0;

		List<Absence> absences = new ArrayList<Absence>();
		for (int i = 0; i < children.size(); i++) {
			Long childId = children.get(i).getId();
			List<Absence> abs = repoAbsence.findByChildId(childId);

			for (int k = 0; k < abs.size(); k++) {
				endDate = new Date(endDate.getTime() + (1000 * 60 * 60 * 24));
				startDate = new Date(startDate.getTime() - (1000 * 60 * 60 * 24));

				if (abs.get(k).getDate().after(startDate) && abs.get(k).getDate().before(endDate)) {
					absences.add((abs.get(k)));
					daysChild--;
				}
			}

			int activityCostChild = 0;
			List<Activity> list = this.repoActivity.findByChildrenId(childId);
			for (int j = 0; j < list.size(); j++) {
				ChildActivity childActivity = (ChildActivity) repoChildActivity.findByActivityId((list.get(j).getId()));
				if (childActivity.getStartDate().before(startDate) && childActivity.getEndDate().after(endDate)) {
					activityCostChild += list.get(j).getPrice();
				}
			}
			activityCost += activityCostChild;
		}
		int endSum = daysChild * 10 + activityCost;
		invoice.setId(0l);
		invoice.setAbsences(absences);
		invoice.setSum(endSum);
		invoice.setParent(parent);
		repoInvoice.save(invoice);
		return "invoice";
	}
}
